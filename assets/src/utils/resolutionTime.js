import { differenceInMinutes, parseISO, compareAsc } from "date-fns";

export function calculateResolutionTime(actions) {
    console.log("üîç Actions:", actions);
    if (!actions || actions.length === 0) {
        console.log("‚ùå Kh√¥ng c√≥ actions ƒë·ªÉ t√≠nh th·ªùi gian");
        return null;
    }

    // S·∫Øp x·∫øp actions theo th·ªùi gian tƒÉng d·∫ßn (t·ª´ c≈© ƒë·∫øn m·ªõi)
    const sortedActions = [...actions].sort((a, b) =>
        compareAsc(parseISO(a.date), parseISO(b.date))
    );

    // T√¨m action t·∫°o card ƒë·∫ßu ti√™n
    const createCardAction = sortedActions.find(
        (action) => action.type === "createCard"
    );

    // T√¨m action ƒë·∫ßu ti√™n chuy·ªÉn v√†o Doing (Inshift)
    const moveToDoingAction = sortedActions.find(
        (action) =>
            action.type === "updateCard" &&
            action.data?.listAfter?.name === "Doing (Inshift)"
    );

    // T√¨m action cu·ªëi c√πng ƒë√°nh d·∫•u dueComplete
    const lastDueCompleteAction = [...sortedActions]
        .reverse()
        .find(
            (action) =>
                action.type === "updateCard" &&
                action.data?.card?.dueComplete === true
        );

    if (!createCardAction) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y action t·∫°o card");
        return null;
    }

    if (!moveToDoingAction) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y action chuy·ªÉn v√†o Doing (Inshift)");
        return null;
    }

    if (!lastDueCompleteAction) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y action ƒë√°nh d·∫•u dueComplete");
        return null;
    }

    const createTime = parseISO(createCardAction.date);
    const moveToDoingTime = parseISO(moveToDoingAction.date);
    const lastDueCompleteTime = parseISO(lastDueCompleteAction.date);

    if (isNaN(createTime) || isNaN(moveToDoingTime) || isNaN(lastDueCompleteTime)) {
        console.warn("‚ùó L·ªói ƒë·ªãnh d·∫°ng th·ªùi gian:", {
            createTime,
            moveToDoingTime,
            lastDueCompleteTime
        });
        return null;
    }

    const firstActionTime = Number(differenceInMinutes(moveToDoingTime, createTime));
    const resolutionTime = Number(differenceInMinutes(lastDueCompleteTime, moveToDoingTime));
    const totalResolutionTime = Number(differenceInMinutes(lastDueCompleteTime, createTime));

    console.log(`‚è±Ô∏è Th·ªùi gian t·ª´ l√∫c t·∫°o card ƒë·∫øn khi chuy·ªÉn v√†o Doing: ${firstActionTime} ph√∫t`);
    console.log(`‚è±Ô∏è Th·ªùi gian t·ª´ l√∫c chuy·ªÉn v√†o Doing ƒë·∫øn khi ho√†n th√†nh: ${resolutionTime} ph√∫t`);
    console.log(`‚è±Ô∏è T·ªïng th·ªùi gian t·ª´ l√∫c t·∫°o card ƒë·∫øn khi ho√†n th√†nh: ${totalResolutionTime} ph√∫t`);
    console.log(`üìÖ Th·ªùi gian t·∫°o card: ${createTime}`);
    console.log(`üìÖ Th·ªùi gian chuy·ªÉn v√†o Doing: ${moveToDoingTime}`);
    console.log(`üìÖ Th·ªùi gian ho√†n th√†nh: ${lastDueCompleteTime}`);

    return {
        resolutionTime: totalResolutionTime,
        TSResolutionTime: resolutionTime,
        firstActionTime: firstActionTime
    };
}
